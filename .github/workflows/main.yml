name: Build dnEditor

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  SOLUTION_FILE: dnEditor.sln
  BUILD_CONFIGURATION: Release
  DOTNET_VERSION: '7.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # 安装 .NET Framework 开发工具包
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1

    # 安装 .NET Framework 引用程序集
    - name: Install .NET Framework Developer Pack
      shell: powershell
      run: |
        # 下载并安装 .NET Framework 4.0 Developer Pack
        $url = "https://download.microsoft.com/download/A/6/A/A6AC035D-DA3F-4F0C-ADA4-37C8E5D34E3D/setup/NDP40-KB2468871-v2-x86.exe"
        $output = "ndp40-devpack.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/q /norestart" -Wait
        
        # 安装 Windows SDK for .NET Framework 2.0
        choco install netfx-4.0.3-devpack -y
        choco install windows-sdk-7.1 -y

    - name: Initialize submodules
      run: |
        git submodule update --init --recursive
        
    # 更新项目文件
    - name: Update project files
      shell: powershell
      run: |
        # 更新所有 .csproj 文件
        Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
          $content = Get-Content $_.FullName -Raw
          # 添加引用程序集路径
          if (-not ($content -match "<Reference Include=`"System`"")) {
            $content = $content -replace "</Project>", @"
              <ItemGroup>
                <Reference Include="System" />
                <Reference Include="System.Core" />
                <Reference Include="System.Data" />
                <Reference Include="System.Drawing" />
                <Reference Include="System.Windows.Forms" />
                <Reference Include="System.Xml" />
              </ItemGroup>
            </Project>
"@
          }
          $content | Set-Content $_.FullName
        }

    - name: Restore NuGet packages
      run: |
        nuget restore ${{ env.SOLUTION_FILE }}

    - name: Build with MSBuild
      run: |
        msbuild ${{ env.SOLUTION_FILE }} `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform="Any CPU" `
          /p:TargetFrameworkVersion=v4.0 `
          /t:Rebuild `
          /m

    - name: Create output directory
      run: mkdir publish

    - name: Copy build outputs
      shell: powershell
      run: |
        Copy-Item "dnEditor\bin\${{ env.BUILD_CONFIGURATION }}\*" -Destination "publish" -Recurse

    - name: Create ZIP archive
      shell: pwsh
      run: |
        Compress-Archive -Path publish\* -DestinationPath dnEditor-win-x64.zip -Force

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: dnEditor-Windows
        path: dnEditor-win-x64.zip
        if-no-files-found: error

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display structure of downloaded files
      run: ls -R artifacts/

    - name: Prepare release files
      run: |
        mkdir release_files
        find artifacts -name "*.zip" -exec cp {} release_files/ \;
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release_files/*.zip
        generate_release_notes: true
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Release ${{ github.ref_name }}
        body: |
          ## dnEditor Release ${{ github.ref_name }}
          
          ### 功能特点
          - 基于 dnlib 的 .NET 程序集编辑器
          - 支持 ILSpy 反编译器集成
          - 提供成员创建和删除支持
          - 包含搜索功能
          
          ### 系统要求
          - Windows x64 系统
          - .NET Framework 4.0 或更高版本
          
          ### 更
